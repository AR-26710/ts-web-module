var e=Object.defineProperty,t=(t,n,r)=>(((t,n,r)=>{n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r})(t,"symbol"!=typeof n?n+"":n,r),r);class n extends HTMLElement{constructor(){super(),t(this,"shadow"),this.shadow=this.attachShadow({mode:"open"}),this.render()}static get observedAttributes(){return["left-text","right-text","href","target"]}connectedCallback(){this.updateContent(),this.bindEvents()}disconnectedCallback(){const e=this.shadow.querySelector("a");e&&(e.removeEventListener("click",this.handleClick),e.removeEventListener("keydown",this.handleKeyPress))}attributeChangedCallback(){this.updateContent()}render(){const e=document.createElement("style");e.textContent="\n      :host {\n        --rl-left-color: #2c3e50;\n        --rl-right-color: #3498db;\n        --rl-left-hover: #34495e;\n        --rl-right-hover: #2980b9;\n        --rl-divider-color: #95a5a6;\n        --rl-text-color: #ecf0f1;\n        display: inline-block;\n        width: fit-content;\n        min-width: 120px;\n        font-family: inherit;\n      }\n      .rl-container {\n        display: inline-flex;\n        border-radius: 8px;\n        overflow: hidden;\n        transition: all 0.3s ease;\n        text-decoration: none;\n        color: var(--rl-text-color);\n        position: relative;\n        margin: 10px 0;\n      }\n      .rl-container:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      }\n      .rl-left, .rl-right {\n        padding: 12px 20px;\n        flex: 0 1 auto;\n        display: flex;\n        align-items: center;\n        transition: background 0.3s ease;\n      }\n      .rl-left {\n        background: var(--rl-left-color);\n      }\n      .rl-right {\n        background: var(--rl-right-color);\n      }\n      /* 只有当 right-text 存在时才显示左边框 */\n      .rl-container:has(.rl-right:not(:empty)) .rl-left {\n        border-right: 2px solid var(--rl-divider-color);\n      }\n      .rl-container:hover .rl-left {\n        background: var(--rl-left-hover);\n      }\n      .rl-container:hover .rl-right {\n        background: var(--rl-right-hover);\n      }\n    ";const t=document.createElement("a");t.className="rl-container",t.setAttribute("role","link"),t.tabIndex=0;const n=document.createElement("div");n.className="rl-left";const r=document.createElement("div");r.className="rl-right",t.append(n,r),this.shadow.append(e,t)}updateContent(){var e;const t=this.shadow.querySelector("a"),n=(null==(e=this.getAttribute("href"))?void 0:e.trim())??"#",r=this.getAttribute("target")??"_self";t.setAttribute("href",n),t.setAttribute("target",r);const l=this.getAttribute("left-text")??"",i=this.getAttribute("right-text")??"",o=this.shadow.querySelector(".rl-left"),a=this.shadow.querySelector(".rl-right");o.style.display=l.trim()?"flex":"none",o.textContent=l,a.style.display=i.trim()?"flex":"none",a.textContent=i}bindEvents(){const e=this.shadow.querySelector("a");e.addEventListener("click",this.handleClick.bind(this)),e.addEventListener("keydown",this.handleKeyPress.bind(this))}handleClick(e){const t=this.getAttribute("href");(!t||"#"===t)&&e.preventDefault()}handleKeyPress(e){("Enter"===e.key||" "===e.key)&&(e.preventDefault(),this.dispatchEvent(new MouseEvent("click")))}}customElements.define("resource-link",n);
