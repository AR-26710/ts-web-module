var e=Object.defineProperty,t=(t,i,n)=>(((t,i,n)=>{i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[i]=n})(t,"symbol"!=typeof i?i+"":i,n),n);class i extends HTMLElement{constructor(){super(),t(this,"shadow"),t(this,"container"),t(this,"image1"),t(this,"radius",30),this.shadow=this.attachShadow({mode:"open"}),this.render(),this.container=this.shadow.querySelector(".pv-container1"),this.image1=this.shadow.querySelector(".pv-image1")}static get observedAttributes(){return["image1","image2","radius"]}connectedCallback(){this.addEventListeners(),this.updateImages()}attributeChangedCallback(e,t,i){if(t!==i)if("radius"===e){this.radius=parseInt(i,10);const e=this.shadow.querySelector(".radius-value");e&&(e.textContent=`${this.radius}px`)}else this.updateImages()}render(){const e=document.createElement("style");e.textContent="\n      .pv-container1 {\n        position: relative;\n        height: 40vh;\n        margin: 8px 0;\n        border: 1px solid #ccc;\n      }\n      .pv-image1, .pv-image2 {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        background-position: center;\n      }\n      .pv-image1 {\n        z-index: 2;\n        clip-path: circle(0 at 0 0);\n      }\n      .pv-image2 {\n        z-index: 1;\n      }\n      .pv-control-panel {\n        position: absolute;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        z-index: 3;\n        background: rgba(255, 255, 255, 0.8);\n        padding: 8px 16px;\n        border-radius: 20px;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n      }\n      .pv-radius-slider {\n        width: 150px;\n        cursor: pointer;\n      }\n      .pv-radius-value {\n        font-size: 14px;\n        color: #333;\n        min-width: 40px;\n        text-align: center;\n      }\n    ";const t=document.createElement("div");t.className="pv-container1",t.innerHTML='\n      <div class="pv-image1"></div>\n      <div class="pv-image2"></div>\n      <div class="pv-control-panel">\n        <span>透视范围:</span>\n        <input type="range" min="20" max="200" value="100" class="pv-radius-slider">\n        <span class="pv-radius-value">100px</span>\n      </div>\n    ',this.shadow.append(e,t)}updateImages(){const e=this.getAttribute("image1"),t=this.getAttribute("image2"),i=this.getAttribute("radius");if(e&&(this.image1.style.backgroundImage=`url('${e}')`),t&&(this.shadow.querySelector(".pv-image2").style.backgroundImage=`url('${t}')`),i){this.radius=parseInt(i,10);const e=this.shadow.querySelector(".pv-radius-slider"),t=this.shadow.querySelector(".pv-radius-value");e&&(e.value=this.radius.toString()),t&&(t.textContent=`${this.radius}px`)}}addEventListeners(){const e=(e,t)=>{const i=this.container.getBoundingClientRect(),n=e-i.left,s=t-i.top;this.image1.style.clipPath=`circle(${this.radius}px at ${n}px ${s}px)`};this.container.addEventListener("mousemove",t=>{e(t.clientX,t.clientY)}),this.container.addEventListener("touchmove",t=>{t.preventDefault();const i=t.touches[0];e(i.clientX,i.clientY)},{passive:!1});const t=this.shadow.querySelector(".pv-radius-slider"),i=this.shadow.querySelector(".pv-radius-value");t&&i&&(t.value=this.radius.toString(),i.textContent=`${this.radius}px`,t.addEventListener("input",e=>{this.radius=parseInt(e.target.value,10),i.textContent=`${this.radius}px`,this.setAttribute("radius",this.radius.toString())})),this.container.addEventListener("mouseleave",()=>{this.image1.style.clipPath="circle(0 at 0 0)"}),this.container.addEventListener("touchend",()=>{this.image1.style.clipPath="circle(0 at 0 0)"})}}customElements.define("perspective-view",i);
